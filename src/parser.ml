type token =
  | NEW
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMICOL
  | COMMA
  | DOT
  | COLON
  | ADDEQ
  | SUBEQ
  | MULEQ
  | DIVEQ
  | MODEQ
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | INC
  | DEC
  | EXP
  | ASN
  | AND
  | OR
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | CONTINUE
  | BREAK
  | IF
  | ELSE
  | FOR
  | WHILE
  | RETURN
  | FLD
  | TBL
  | REC
  | VOID
  | STR
  | BOOL
  | INT
  | FLOAT
  | INT_LIT of (int)
  | FLOAT_LIT of (float)
  | BOOL_LIT of (bool)
  | STR_LIT of (string)
  | ID of (string)
  | NONE
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 64 "parser.ml"
let yytransl_const = [|
  257 (* NEW *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* LBRACK *);
  263 (* RBRACK *);
  264 (* SEMICOL *);
  265 (* COMMA *);
  266 (* DOT *);
  267 (* COLON *);
  268 (* ADDEQ *);
  269 (* SUBEQ *);
  270 (* MULEQ *);
  271 (* DIVEQ *);
  272 (* MODEQ *);
  273 (* PLUS *);
  274 (* MINUS *);
  275 (* TIMES *);
  276 (* DIVIDE *);
  277 (* MOD *);
  278 (* INC *);
  279 (* DEC *);
  280 (* EXP *);
  281 (* ASN *);
  282 (* AND *);
  283 (* OR *);
  284 (* NOT *);
  285 (* EQ *);
  286 (* NEQ *);
  287 (* LT *);
  288 (* LEQ *);
  289 (* GT *);
  290 (* GEQ *);
  291 (* CONTINUE *);
  292 (* BREAK *);
  293 (* IF *);
  294 (* ELSE *);
  295 (* FOR *);
  296 (* WHILE *);
  297 (* RETURN *);
  298 (* FLD *);
  299 (* TBL *);
  300 (* REC *);
  301 (* VOID *);
  302 (* STR *);
  303 (* BOOL *);
  304 (* INT *);
  305 (* FLOAT *);
  311 (* NONE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  306 (* INT_LIT *);
  307 (* FLOAT_LIT *);
  308 (* BOOL_LIT *);
  309 (* STR_LIT *);
  310 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\004\000\004\000\004\000\005\000\005\000\005\000\005\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\008\000\011\000\
\013\000\013\000\010\000\009\000\009\000\012\000\012\000\001\000\
\001\000\001\000\015\000\016\000\016\000\018\000\018\000\014\000\
\014\000\003\000\003\000\017\000\017\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\004\000\001\000\004\000\003\000\001\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\001\000\003\000\004\000\001\000\001\000\004\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\005\000\005\000\
\003\000\005\000\007\000\000\000\001\000\001\000\003\000\000\000\
\002\000\002\000\008\000\000\000\001\000\002\000\004\000\003\000\
\005\000\000\000\001\000\000\000\002\000\002\000\003\000\003\000\
\007\000\005\000\009\000\005\000\002\000\002\000\001\000\002\000"

let yydefred = "\000\000\
\064\000\000\000\000\000\005\000\007\000\006\000\008\000\002\000\
\004\000\001\000\003\000\000\000\065\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\049\000\051\000\
\050\000\000\000\033\000\000\000\000\000\000\000\000\000\045\000\
\046\000\052\000\053\000\000\000\072\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\031\000\000\000\000\000\
\000\000\009\000\000\000\000\000\000\000\000\000\000\000\034\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
\000\000\000\000\019\000\020\000\021\000\022\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\070\000\000\000\
\000\000\073\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\011\000\000\000\044\000\076\000\000\000\000\000\055\000\
\000\000\056\000\000\000\000\000\000\000\071\000\000\000\000\000\
\057\000\000\000\076\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\087\000\077\000\059\000\000\000\
\000\000\085\000\086\000\000\000\000\000\000\000\000\000\000\000\
\078\000\058\000\080\000\000\000\000\000\000\000\079\000\000\000\
\000\000\000\000\000\000\000\000\084\000\000\000\000\000\081\000\
\000\000\000\000\083\000"

let yydgoto = "\002\000\
\003\000\028\000\029\000\030\000\087\000\148\000\032\000\033\000\
\084\000\034\000\035\000\044\000\118\000\149\000\014\000\075\000\
\133\000\076\000\150\000"

let yysindex = "\013\000\
\000\000\000\000\076\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\255\000\000\000\000\114\000\003\255\
\170\255\114\000\114\000\114\000\114\000\000\000\000\000\000\000\
\000\000\013\255\000\000\095\255\010\255\085\002\198\255\000\000\
\000\000\000\000\000\000\076\002\000\000\114\000\036\255\042\255\
\043\255\192\000\198\255\023\255\000\000\000\000\114\000\071\255\
\114\000\000\000\114\000\114\000\114\000\114\000\114\000\000\000\
\000\000\114\000\225\254\114\000\114\000\114\000\114\000\114\000\
\114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
\114\000\016\255\044\255\069\255\187\001\114\000\114\000\037\255\
\000\000\000\000\114\000\088\255\119\255\114\000\122\255\036\002\
\217\000\198\255\198\255\198\255\198\255\198\255\198\255\000\000\
\153\255\153\255\000\000\000\000\000\000\000\000\054\002\049\000\
\072\002\072\002\123\001\123\001\123\001\123\001\000\000\133\255\
\076\002\000\000\011\002\001\255\136\255\022\255\198\255\000\000\
\198\255\000\000\114\000\000\000\000\000\021\255\096\255\000\000\
\012\255\000\000\100\255\198\255\150\255\000\000\161\255\065\255\
\000\000\158\255\000\000\000\000\162\255\171\255\181\255\218\255\
\219\255\114\000\014\255\214\001\000\000\000\000\000\000\012\255\
\205\255\000\000\000\000\114\000\114\000\114\000\241\001\004\255\
\000\000\000\000\000\000\242\000\180\255\011\001\000\000\059\000\
\114\000\059\000\188\255\226\255\000\000\059\000\114\000\000\000\
\232\255\059\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\236\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\230\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\167\000\000\000\000\000\000\000\119\000\073\255\000\000\
\000\000\000\000\000\000\235\255\000\000\000\000\000\000\000\000\
\000\000\000\000\124\255\000\000\000\000\000\000\236\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\240\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000\006\000\
\000\000\173\255\017\000\081\000\055\001\169\001\106\002\000\000\
\043\001\075\001\000\000\000\000\000\000\000\000\008\000\085\255\
\076\255\132\255\087\001\119\001\128\001\160\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\129\255\000\000\
\007\000\000\000\014\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\255\255\000\000\004\000\000\000\000\000\000\000\024\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\253\255\247\255\000\000\000\000\244\255\128\255\000\000\
\000\000\000\000\000\000\211\255\000\000\026\001\000\000\000\000\
\147\000\000\000\186\255"

let yytablesize = 893
let yytable = "\012\000\
\137\000\085\000\031\000\128\000\036\000\042\000\043\000\045\000\
\046\000\083\000\037\000\037\000\136\000\001\000\047\000\049\000\
\050\000\019\000\048\000\015\000\015\000\015\000\096\000\162\000\
\130\000\077\000\015\000\038\000\038\000\082\000\131\000\083\000\
\074\000\116\000\043\000\088\000\089\000\078\000\090\000\091\000\
\092\000\093\000\094\000\079\000\080\000\095\000\112\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\022\000\023\000\024\000\
\025\000\115\000\043\000\160\000\016\000\111\000\119\000\017\000\
\018\000\121\000\134\000\075\000\019\000\113\000\023\000\075\000\
\075\000\086\000\023\000\023\000\023\000\023\000\023\000\030\000\
\020\000\117\000\120\000\030\000\030\000\030\000\030\000\030\000\
\049\000\171\000\021\000\173\000\015\000\023\000\023\000\176\000\
\023\000\023\000\039\000\179\000\041\000\126\000\132\000\030\000\
\004\000\005\000\006\000\007\000\008\000\009\000\010\000\011\000\
\022\000\023\000\024\000\025\000\026\000\027\000\062\000\083\000\
\122\000\147\000\062\000\063\000\062\000\159\000\024\000\063\000\
\125\000\063\000\024\000\024\000\024\000\024\000\024\000\164\000\
\031\000\166\000\129\000\165\000\135\000\147\000\017\000\018\000\
\138\000\139\000\140\000\019\000\031\000\024\000\024\000\172\000\
\024\000\024\000\031\000\151\000\147\000\177\000\147\000\020\000\
\152\000\154\000\147\000\062\000\063\000\064\000\147\000\036\000\
\065\000\021\000\155\000\036\000\036\000\036\000\156\000\036\000\
\141\000\142\000\143\000\169\000\144\000\145\000\146\000\004\000\
\005\000\006\000\007\000\008\000\009\000\010\000\011\000\022\000\
\023\000\024\000\025\000\026\000\027\000\017\000\018\000\059\000\
\139\000\163\000\019\000\039\000\040\000\041\000\060\000\061\000\
\062\000\063\000\064\000\157\000\158\000\065\000\020\000\066\000\
\067\000\174\000\068\000\069\000\070\000\071\000\072\000\073\000\
\021\000\175\000\178\000\088\000\074\000\068\000\060\000\141\000\
\142\000\143\000\069\000\144\000\145\000\146\000\004\000\005\000\
\006\000\007\000\008\000\009\000\010\000\011\000\022\000\023\000\
\024\000\025\000\026\000\027\000\082\000\082\000\074\000\082\000\
\082\000\082\000\029\000\061\000\013\000\014\000\029\000\029\000\
\029\000\029\000\029\000\037\000\015\000\082\000\016\000\037\000\
\037\000\037\000\074\000\037\000\013\000\153\000\000\000\082\000\
\000\000\029\000\029\000\000\000\000\000\000\000\082\000\082\000\
\082\000\000\000\082\000\082\000\082\000\082\000\082\000\082\000\
\082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
\082\000\082\000\082\000\017\000\018\000\000\000\139\000\000\000\
\019\000\060\000\061\000\062\000\063\000\064\000\000\000\000\000\
\065\000\000\000\066\000\000\000\020\000\068\000\069\000\070\000\
\071\000\072\000\073\000\038\000\000\000\000\000\021\000\038\000\
\038\000\038\000\000\000\038\000\000\000\141\000\142\000\143\000\
\000\000\144\000\145\000\146\000\004\000\005\000\006\000\007\000\
\008\000\009\000\010\000\011\000\022\000\023\000\024\000\025\000\
\026\000\027\000\017\000\018\000\000\000\000\000\000\000\019\000\
\000\000\042\000\000\000\000\000\000\000\042\000\042\000\042\000\
\042\000\042\000\000\000\020\000\000\000\000\000\000\000\042\000\
\042\000\042\000\042\000\042\000\000\000\021\000\042\000\000\000\
\042\000\042\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\000\000\000\000\004\000\005\000\006\000\007\000\008\000\
\009\000\010\000\011\000\022\000\023\000\024\000\025\000\026\000\
\027\000\010\000\000\000\000\000\000\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\081\000\010\000\010\000\010\000\010\000\010\000\
\010\000\059\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\000\061\000\062\000\063\000\064\000\000\000\000\000\065\000\
\000\000\066\000\067\000\124\000\068\000\069\000\070\000\071\000\
\072\000\073\000\059\000\000\000\000\000\000\000\000\000\000\000\
\000\000\060\000\061\000\062\000\063\000\064\000\000\000\000\000\
\065\000\000\000\066\000\067\000\168\000\068\000\069\000\070\000\
\071\000\072\000\073\000\059\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\000\061\000\062\000\063\000\064\000\000\000\
\000\000\065\000\000\000\066\000\067\000\170\000\068\000\069\000\
\070\000\071\000\072\000\073\000\059\000\000\000\000\000\000\000\
\000\000\000\000\000\000\060\000\061\000\062\000\063\000\064\000\
\000\000\000\000\065\000\000\000\066\000\067\000\000\000\068\000\
\069\000\070\000\071\000\072\000\073\000\017\000\000\000\000\000\
\000\000\017\000\017\000\017\000\017\000\017\000\000\000\000\000\
\000\000\039\000\000\000\017\000\017\000\039\000\039\000\039\000\
\000\000\039\000\000\000\000\000\017\000\017\000\000\000\017\000\
\017\000\017\000\017\000\017\000\017\000\018\000\000\000\000\000\
\000\000\018\000\018\000\018\000\018\000\018\000\000\000\000\000\
\000\000\025\000\000\000\018\000\018\000\025\000\025\000\025\000\
\025\000\025\000\000\000\000\000\018\000\018\000\000\000\018\000\
\018\000\018\000\018\000\018\000\018\000\000\000\000\000\000\000\
\025\000\025\000\000\000\025\000\025\000\025\000\025\000\025\000\
\025\000\027\000\000\000\000\000\000\000\027\000\027\000\027\000\
\027\000\027\000\026\000\000\000\000\000\000\000\026\000\026\000\
\026\000\026\000\026\000\060\000\061\000\062\000\063\000\064\000\
\027\000\027\000\065\000\027\000\027\000\027\000\027\000\027\000\
\027\000\026\000\026\000\000\000\026\000\026\000\026\000\026\000\
\026\000\026\000\028\000\000\000\000\000\000\000\028\000\028\000\
\028\000\028\000\028\000\040\000\000\000\000\000\000\000\040\000\
\040\000\040\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\028\000\028\000\000\000\028\000\028\000\028\000\028\000\
\028\000\028\000\114\000\000\000\059\000\000\000\000\000\000\000\
\000\000\000\000\000\000\060\000\061\000\062\000\063\000\064\000\
\000\000\000\000\065\000\000\000\066\000\067\000\000\000\068\000\
\069\000\070\000\071\000\072\000\073\000\161\000\000\000\059\000\
\000\000\000\000\000\000\000\000\000\000\000\000\060\000\061\000\
\062\000\063\000\064\000\000\000\000\000\065\000\000\000\066\000\
\067\000\000\000\068\000\069\000\070\000\071\000\072\000\073\000\
\167\000\000\000\059\000\000\000\000\000\000\000\000\000\000\000\
\000\000\060\000\061\000\062\000\063\000\064\000\000\000\000\000\
\065\000\000\000\066\000\067\000\000\000\068\000\069\000\070\000\
\071\000\072\000\073\000\127\000\059\000\000\000\000\000\000\000\
\000\000\000\000\000\000\060\000\061\000\062\000\063\000\064\000\
\000\000\000\000\065\000\000\000\066\000\067\000\000\000\068\000\
\069\000\070\000\071\000\072\000\073\000\059\000\123\000\000\000\
\000\000\000\000\000\000\000\000\060\000\061\000\062\000\063\000\
\064\000\000\000\000\000\065\000\000\000\066\000\067\000\000\000\
\068\000\069\000\070\000\071\000\072\000\073\000\060\000\061\000\
\062\000\063\000\064\000\000\000\000\000\065\000\000\000\000\000\
\000\000\000\000\068\000\069\000\070\000\071\000\072\000\073\000\
\060\000\061\000\062\000\063\000\064\000\000\000\000\000\065\000\
\051\000\052\000\053\000\054\000\055\000\000\000\070\000\071\000\
\072\000\073\000\056\000\057\000\041\000\058\000\000\000\000\000\
\041\000\041\000\041\000\000\000\041\000\004\000\005\000\006\000\
\007\000\008\000\009\000\010\000\011\000"

let yycheck = "\003\000\
\129\000\047\000\015\000\003\001\002\001\018\000\019\000\020\000\
\021\000\009\001\008\001\008\001\001\001\001\000\002\001\002\001\
\007\001\006\001\006\001\006\001\006\001\006\001\054\001\152\000\
\003\001\038\000\006\001\025\001\025\001\007\001\009\001\009\001\
\036\000\079\000\047\000\048\000\049\000\002\001\051\000\052\000\
\053\000\054\000\055\000\002\001\002\001\058\000\003\001\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\050\001\051\001\052\001\
\053\001\078\000\079\000\054\001\054\001\054\001\083\000\001\001\
\002\001\086\000\054\001\003\001\006\001\009\001\003\001\007\001\
\008\001\011\001\007\001\008\001\009\001\010\001\011\001\003\001\
\018\001\053\001\003\001\007\001\008\001\009\001\010\001\011\001\
\002\001\168\000\028\001\170\000\006\001\026\001\027\001\174\000\
\029\001\030\001\042\001\178\000\044\001\113\000\123\000\027\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\003\001\009\001\
\007\001\133\000\007\001\003\001\009\001\146\000\003\001\007\001\
\004\001\009\001\007\001\008\001\009\001\010\001\011\001\156\000\
\157\000\158\000\011\001\157\000\053\001\153\000\001\001\002\001\
\053\001\004\001\005\001\006\001\169\000\026\001\027\001\169\000\
\029\001\030\001\175\000\003\001\168\000\175\000\170\000\018\001\
\011\001\008\001\174\000\019\001\020\001\021\001\178\000\003\001\
\024\001\028\001\008\001\007\001\008\001\009\001\002\001\011\001\
\035\001\036\001\037\001\008\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\001\001\002\001\010\001\
\004\001\005\001\006\001\042\001\043\001\044\001\017\001\018\001\
\019\001\020\001\021\001\002\001\002\001\024\001\018\001\026\001\
\027\001\038\001\029\001\030\001\031\001\032\001\033\001\034\001\
\028\001\008\001\003\001\000\000\007\001\003\001\003\001\035\001\
\036\001\037\001\003\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\001\001\002\001\008\001\004\001\
\005\001\006\001\003\001\003\001\007\001\007\001\007\001\008\001\
\009\001\010\001\011\001\003\001\007\001\018\001\007\001\007\001\
\008\001\009\001\003\001\011\001\003\000\139\000\255\255\028\001\
\255\255\026\001\027\001\255\255\255\255\255\255\035\001\036\001\
\037\001\255\255\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\001\001\002\001\255\255\004\001\255\255\
\006\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\255\255\018\001\029\001\030\001\031\001\
\032\001\033\001\034\001\003\001\255\255\255\255\028\001\007\001\
\008\001\009\001\255\255\011\001\255\255\035\001\036\001\037\001\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\001\001\002\001\255\255\255\255\255\255\006\001\
\255\255\003\001\255\255\255\255\255\255\007\001\008\001\009\001\
\010\001\011\001\255\255\018\001\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\255\255\028\001\024\001\255\255\
\026\001\027\001\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001\255\255\255\255\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\003\001\255\255\255\255\255\255\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\003\001\029\001\030\001\031\001\032\001\033\001\
\034\001\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\027\001\003\001\029\001\030\001\031\001\032\001\
\033\001\034\001\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\027\001\003\001\029\001\030\001\031\001\
\032\001\033\001\034\001\010\001\255\255\255\255\255\255\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\255\255\026\001\027\001\003\001\029\001\030\001\
\031\001\032\001\033\001\034\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\255\255\026\001\027\001\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001\003\001\255\255\255\255\
\255\255\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\003\001\255\255\017\001\018\001\007\001\008\001\009\001\
\255\255\011\001\255\255\255\255\026\001\027\001\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001\003\001\255\255\255\255\
\255\255\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\003\001\255\255\017\001\018\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\026\001\027\001\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001\255\255\255\255\255\255\
\026\001\027\001\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001\003\001\255\255\255\255\255\255\007\001\008\001\009\001\
\010\001\011\001\003\001\255\255\255\255\255\255\007\001\008\001\
\009\001\010\001\011\001\017\001\018\001\019\001\020\001\021\001\
\026\001\027\001\024\001\029\001\030\001\031\001\032\001\033\001\
\034\001\026\001\027\001\255\255\029\001\030\001\031\001\032\001\
\033\001\034\001\003\001\255\255\255\255\255\255\007\001\008\001\
\009\001\010\001\011\001\003\001\255\255\255\255\255\255\007\001\
\008\001\009\001\255\255\011\001\255\255\255\255\255\255\255\255\
\255\255\026\001\027\001\255\255\029\001\030\001\031\001\032\001\
\033\001\034\001\008\001\255\255\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\255\255\026\001\027\001\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001\008\001\255\255\010\001\
\255\255\255\255\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\255\255\026\001\
\027\001\255\255\029\001\030\001\031\001\032\001\033\001\034\001\
\008\001\255\255\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\027\001\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\255\255\026\001\027\001\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\027\001\255\255\
\029\001\030\001\031\001\032\001\033\001\034\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\255\255\029\001\030\001\031\001\032\001\033\001\034\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\012\001\013\001\014\001\015\001\016\001\255\255\031\001\032\001\
\033\001\034\001\022\001\023\001\003\001\025\001\255\255\255\255\
\007\001\008\001\009\001\255\255\011\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001"

let yynames_const = "\
  NEW\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  SEMICOL\000\
  COMMA\000\
  DOT\000\
  COLON\000\
  ADDEQ\000\
  SUBEQ\000\
  MULEQ\000\
  DIVEQ\000\
  MODEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  INC\000\
  DEC\000\
  EXP\000\
  ASN\000\
  AND\000\
  OR\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  CONTINUE\000\
  BREAK\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  RETURN\000\
  FLD\000\
  TBL\000\
  REC\000\
  VOID\000\
  STR\000\
  BOOL\000\
  INT\000\
  FLOAT\000\
  NONE\000\
  EOF\000\
  "

let yynames_block = "\
  INT_LIT\000\
  FLOAT_LIT\000\
  BOOL_LIT\000\
  STR_LIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
                 (
																{
																	ptype = Int;
																	dimension = []
																}
															)
# 540 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
      (
																{
																	ptype = String;
																	dimension = []
																}
															)
# 551 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "parser.mly"
        (
																{
																	ptype = Float;
																	dimension = []
																}
															)
# 562 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
       (
																{
																	ptype = Bool;
																	dimension = []
																}
															)
# 573 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
      (
																{
																	ptype = Fld;
																	dimension = []
																}
															)
# 584 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
      (
																{
																	ptype = Rec;
																	dimension = []
																}
															)
# 595 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
      (
																{
																	ptype = Tbl;
																	dimension = []
																}
															)
# 606 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
       (
																{
																	ptype = Void;
																	dimension = []
																}
															)
# 617 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'datatype) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 89 "parser.mly"
                                  (
																{
																	ptype = _1.ptype;
																	dimension = [(if _3 == Noexpr then IntLit(0) else _3)]
																}
															)
# 630 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 117 "parser.mly"
                 ( Var(_1) )
# 637 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'index_list) in
    Obj.repr(
# 119 "parser.mly"
               ( Array(_1, _3) )
# 645 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 120 "parser.mly"
                      ( Access(_1, _3) )
# 653 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                   ( _1 )
# 660 "parser.ml"
               : 'index_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                       ( Range(Noexpr, _2) )
# 667 "parser.ml"
               : 'index_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                      ( Range(_1, Noexpr) )
# 674 "parser.ml"
               : 'index_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                         ( Range(_1, _3) )
# 682 "parser.ml"
               : 'index_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                        ( Binop(_1, Add, _3) )
# 690 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                        ( Binop(_1, Sub, _3) )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                        ( Binop(_1, Mul, _3) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                         ( Binop(_1, Div, _3) )
# 714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                       ( Binop(_1, Mod, _3) )
# 722 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                       ( Binop(_1, Exp, _3) )
# 730 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                       ( Binop(_1, Eq, _3) )
# 738 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                       ( Binop(_1, Neq, _3) )
# 746 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                       ( Binop(_1, Lt, _3) )
# 754 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                       ( Binop(_1, Gt, _3) )
# 762 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                       ( Binop(_1, Leq, _3) )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                       ( Binop(_1, Geq, _3) )
# 778 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                       ( Binop(_1, And, _3) )
# 786 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                       ( Binop(_1, Or, _3) )
# 794 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                     ( Unop(Not, _2) )
# 801 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                            ( Unop(Neg, _2) )
# 808 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "parser.mly"
                  ( None )
# 814 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lvalue) in
    Obj.repr(
# 148 "parser.mly"
                      ( Postop(_1, Inc) )
# 821 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lvalue) in
    Obj.repr(
# 149 "parser.mly"
                      ( Postop(_1, Dec) )
# 828 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
                         ( AssignOp(_1, Addeq, _3) )
# 836 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
                         ( AssignOp(_1, Subeq, _3) )
# 844 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "parser.mly"
                         ( AssignOp(_1, Muleq, _3) )
# 852 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
                         ( AssignOp(_1, Diveq, _3) )
# 860 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "parser.mly"
                         ( AssignOp(_1, Modeq, _3) )
# 868 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
                        ( AssignOp(_1, Asn, _3) )
# 876 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lvalue) in
    Obj.repr(
# 157 "parser.mly"
                    ( Lval(_1) )
# 883 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
                          ( _2 )
# 890 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'datatype) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
               ( Cast(_1, _3) )
# 898 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 167 "parser.mly"
                    ( _1 )
# 905 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tbl_lit) in
    Obj.repr(
# 168 "parser.mly"
                    ( Tbl(_1) )
# 912 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 171 "parser.mly"
               ( FuncCall(_1, _3) )
# 920 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 174 "parser.mly"
                   ( IntLit(_1) )
# 927 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 175 "parser.mly"
                     ( FloatLit(_1) )
# 934 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 176 "parser.mly"
                    ( StringLit(_1) )
# 941 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 177 "parser.mly"
                     ( BoolLit(_1) )
# 948 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fld_lit) in
    Obj.repr(
# 178 "parser.mly"
                    ( _1 )
# 955 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rec_lit) in
    Obj.repr(
# 179 "parser.mly"
                    ( _1 )
# 962 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_list) in
    Obj.repr(
# 180 "parser.mly"
                              ( ArrayLit(List.rev _2) )
# 969 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_list) in
    Obj.repr(
# 188 "parser.mly"
               ( List.rev _4 )
# 976 "parser.ml"
               : 'tbl_lit))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'rec_init) in
    Obj.repr(
# 197 "parser.mly"
                                   ( Rec(List.rev _4) )
# 983 "parser.ml"
               : 'rec_lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 200 "parser.mly"
                             ( [RecRef(_1, _3)] )
# 991 "parser.ml"
               : 'rec_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'rec_init) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 202 "parser.mly"
               ( RecRef(_3, _5) :: _1 )
# 1000 "parser.ml"
               : 'rec_init))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 210 "parser.mly"
               ( Fld(_4, _6) )
# 1008 "parser.ml"
               : 'fld_lit))
; (fun __caml_parser_env ->
    Obj.repr(
# 213 "parser.mly"
                      ( [] )
# 1014 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 214 "parser.mly"
                       ( List.rev _1 )
# 1021 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 217 "parser.mly"
                  ( [_1] )
# 1028 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 218 "parser.mly"
                            ( _3 :: _1 )
# 1036 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 222 "parser.mly"
                       ( { gdecls = []; fdecls = [] } )
# 1042 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 223 "parser.mly"
                        ( { gdecls = _2 :: _1.gdecls; fdecls = _1.fdecls } )
# 1050 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 224 "parser.mly"
                        ( { gdecls = _1.gdecls; fdecls = _2 :: _1.fdecls } )
# 1058 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 228 "parser.mly"
               ( {
																	fname = _2;
																	formals = _4;
																	body = Block(List.rev _7);
																	return_type = _1
															} )
# 1073 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 236 "parser.mly"
                      ( [] )
# 1079 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 237 "parser.mly"
                      ( List.rev _1 )
# 1086 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 241 "parser.mly"
                     ([
																{
																	vname = _2;
																	vtype = _1;
																	vinit = Noexpr;
																}]
															)
# 1100 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'datatype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 249 "parser.mly"
               ( ({
																	vname = _4;
																	vtype = _3;
																	vinit = Noexpr;
																}) :: _1
															)
# 1114 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 257 "parser.mly"
                         (
																{
																	vname = _2;
																	vtype = _1;
																	vinit = Noexpr;
																}
															)
# 1128 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 265 "parser.mly"
               (
																{
																	vname = _2;
																	vtype = _1;
																	vinit = _4;
																}
															)
# 1143 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 279 "parser.mly"
                      ( Noexpr )
# 1149 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 280 "parser.mly"
                   ( _1 )
# 1156 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 283 "parser.mly"
                      ( [] )
# 1162 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 284 "parser.mly"
                        ( _2 :: _1 )
# 1170 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 287 "parser.mly"
                      ( Expr(_1) )
# 1177 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 288 "parser.mly"
                          ( Return(_2) )
# 1184 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 289 "parser.mly"
                            ( Block(List.rev _2) )
# 1191 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 291 "parser.mly"
               ( If(_3, _5, _7) )
# 1200 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 293 "parser.mly"
               ( If(_3, _5, EmptyStmt) )
# 1208 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 295 "parser.mly"
               ( For(_3, _5, _7, _9) )
# 1218 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 297 "parser.mly"
               ( While(_3, _5) )
# 1226 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 298 "parser.mly"
                        ( Continue )
# 1232 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 299 "parser.mly"
                       ( Break )
# 1238 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 300 "parser.mly"
                   ( VarDeclStmt(_1) )
# 1245 "parser.ml"
               : 'stmt))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
