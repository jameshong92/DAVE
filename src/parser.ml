type token =
  | NEW
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMICOL
  | COMMA
  | DOT
  | COLON
  | ADDEQ
  | SUBEQ
  | MULEQ
  | DIVEQ
  | MODEQ
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | INC
  | DEC
  | EXP
  | ASN
  | AND
  | OR
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | CONTINUE
  | BREAK
  | IF
  | ELSE
  | FOR
  | WHILE
  | RETURN
  | FLD
  | TBL
  | REC
  | VOID
  | STR
  | BOOL
  | INT
  | FLOAT
  | INT_LIT of (int)
  | FLOAT_LIT of (float)
  | BOOL_LIT of (bool)
  | STR_LIT of (string)
  | ID of (string)
  | NONE
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 64 "parser.ml"
let yytransl_const = [|
  257 (* NEW *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* LBRACK *);
  263 (* RBRACK *);
  264 (* SEMICOL *);
  265 (* COMMA *);
  266 (* DOT *);
  267 (* COLON *);
  268 (* ADDEQ *);
  269 (* SUBEQ *);
  270 (* MULEQ *);
  271 (* DIVEQ *);
  272 (* MODEQ *);
  273 (* PLUS *);
  274 (* MINUS *);
  275 (* TIMES *);
  276 (* DIVIDE *);
  277 (* MOD *);
  278 (* INC *);
  279 (* DEC *);
  280 (* EXP *);
  281 (* ASN *);
  282 (* AND *);
  283 (* OR *);
  284 (* NOT *);
  285 (* EQ *);
  286 (* NEQ *);
  287 (* LT *);
  288 (* LEQ *);
  289 (* GT *);
  290 (* GEQ *);
  291 (* CONTINUE *);
  292 (* BREAK *);
  293 (* IF *);
  294 (* ELSE *);
  295 (* FOR *);
  296 (* WHILE *);
  297 (* RETURN *);
  298 (* FLD *);
  299 (* TBL *);
  300 (* REC *);
  301 (* VOID *);
  302 (* STR *);
  303 (* BOOL *);
  304 (* INT *);
  305 (* FLOAT *);
  311 (* NONE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  306 (* INT_LIT *);
  307 (* FLOAT_LIT *);
  308 (* BOOL_LIT *);
  309 (* STR_LIT *);
  310 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\005\000\005\000\005\000\006\000\006\000\006\000\006\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\008\000\008\000\008\000\008\000\008\000\013\000\013\000\
\009\000\011\000\015\000\015\000\010\000\012\000\012\000\014\000\
\014\000\001\000\001\000\001\000\017\000\018\000\018\000\020\000\
\020\000\016\000\016\000\004\000\004\000\019\000\019\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\004\000\001\000\004\000\003\000\001\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\001\000\003\000\004\000\001\000\001\000\001\000\001\000\
\004\000\001\000\001\000\001\000\001\000\003\000\001\000\003\000\
\004\000\004\000\003\000\005\000\006\000\000\000\001\000\001\000\
\003\000\000\000\002\000\002\000\008\000\000\000\001\000\002\000\
\004\000\003\000\005\000\000\000\001\000\000\000\002\000\002\000\
\003\000\003\000\007\000\005\000\009\000\005\000\002\000\002\000\
\001\000\002\000"

let yydefred = "\000\000\
\066\000\000\000\000\000\006\000\008\000\007\000\003\000\005\000\
\002\000\004\000\000\000\067\000\068\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\050\000\
\051\000\053\000\052\000\001\000\033\000\000\000\000\000\000\000\
\000\000\000\000\045\000\046\000\047\000\048\000\000\000\074\000\
\000\000\000\000\055\000\000\000\032\000\031\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
\000\000\000\000\034\000\035\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\019\000\
\020\000\021\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\072\000\000\000\000\000\075\000\056\000\
\000\000\057\000\000\000\000\000\058\000\000\000\049\000\000\000\
\011\000\000\000\044\000\078\000\000\000\000\000\000\000\059\000\
\000\000\000\000\000\000\073\000\061\000\000\000\078\000\069\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\089\000\079\000\060\000\000\000\087\000\088\000\000\000\000\000\
\000\000\000\000\080\000\082\000\000\000\000\000\000\000\081\000\
\000\000\000\000\000\000\000\000\000\000\086\000\000\000\000\000\
\083\000\000\000\000\000\085\000"

let yydgoto = "\002\000\
\003\000\030\000\031\000\032\000\033\000\092\000\152\000\035\000\
\036\000\037\000\038\000\089\000\044\000\086\000\088\000\153\000\
\013\000\078\000\139\000\079\000\154\000"

let yysindex = "\011\000\
\000\000\000\000\099\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\255\000\000\000\000\133\000\028\255\250\254\
\133\000\023\255\133\000\133\000\029\255\030\255\036\255\000\000\
\000\000\000\000\000\000\000\000\000\000\084\255\112\255\039\255\
\165\255\001\000\000\000\000\000\000\000\000\000\099\000\000\000\
\133\000\074\255\000\000\040\255\000\000\000\000\133\000\133\000\
\027\255\133\000\116\000\133\000\000\000\133\000\133\000\133\000\
\133\000\133\000\000\000\000\000\133\000\010\255\133\000\133\000\
\133\000\133\000\133\000\133\000\133\000\133\000\133\000\133\000\
\133\000\133\000\133\000\133\000\016\255\093\255\088\255\213\001\
\000\000\000\000\023\255\037\002\001\000\002\255\091\255\120\255\
\096\255\102\255\133\000\105\255\062\002\243\000\001\000\001\000\
\001\000\001\000\001\000\001\000\000\000\018\000\018\000\000\000\
\000\000\000\000\000\000\098\002\080\002\116\002\116\002\064\001\
\064\001\064\001\064\001\000\000\109\255\099\000\000\000\000\000\
\066\255\000\000\133\000\023\255\000\000\075\255\000\000\001\000\
\000\000\133\000\000\000\000\000\016\255\132\255\001\000\000\000\
\130\255\001\000\156\255\000\000\000\000\023\255\000\000\000\000\
\136\255\137\255\149\255\150\255\152\255\133\000\011\255\240\001\
\000\000\000\000\000\000\210\255\000\000\000\000\133\000\133\000\
\133\000\011\002\000\000\000\000\012\001\147\255\037\001\000\000\
\062\000\133\000\062\000\121\255\159\255\000\000\062\000\133\000\
\000\000\161\255\062\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\175\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\175\255\000\255\000\000\
\000\000\000\000\000\000\000\000\017\255\018\255\012\255\000\000\
\000\000\000\000\000\000\000\000\000\000\186\000\000\000\000\000\
\218\000\080\255\000\000\000\000\000\000\000\000\180\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\182\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\183\255\000\000\
\000\000\000\000\000\000\000\000\006\255\000\000\000\000\000\000\
\000\000\186\255\000\000\000\000\187\255\000\000\162\255\223\255\
\074\000\085\000\117\000\129\000\000\000\069\001\101\001\000\000\
\000\000\000\000\000\000\123\255\064\000\113\255\214\255\113\001\
\145\001\154\001\186\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\255\
\000\000\206\255\000\000\000\000\000\000\000\000\024\255\000\000\
\000\000\211\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\212\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\212\255\000\000\008\000\000\000\000\000\000\000\216\255\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\005\000\253\255\106\255\000\000\000\000\243\255\241\255\
\000\000\000\000\000\000\000\000\000\000\177\000\000\000\226\000\
\000\000\000\000\090\000\000\000\166\255"

let yytablesize = 918
let yytable = "\011\000\
\034\000\040\000\043\000\042\000\122\000\045\000\046\000\001\000\
\064\000\166\000\123\000\001\000\052\000\007\000\064\000\016\000\
\014\000\007\000\041\000\173\000\014\000\014\000\006\000\008\000\
\001\000\178\000\065\000\080\000\018\000\039\000\047\000\048\000\
\065\000\084\000\085\000\077\000\085\000\093\000\094\000\049\000\
\095\000\096\000\097\000\098\000\099\000\053\000\082\000\100\000\
\083\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\114\000\115\000\028\000\
\028\000\007\000\101\000\120\000\015\000\028\000\006\000\008\000\
\024\000\025\000\026\000\027\000\081\000\128\000\172\000\087\000\
\174\000\116\000\077\000\062\000\177\000\050\000\077\000\077\000\
\180\000\051\000\063\000\064\000\065\000\066\000\067\000\117\000\
\118\000\068\000\127\000\069\000\070\000\124\000\071\000\072\000\
\073\000\074\000\075\000\076\000\136\000\135\000\123\000\129\000\
\132\000\052\000\133\000\023\000\138\000\014\000\134\000\023\000\
\023\000\023\000\023\000\023\000\125\000\029\000\155\000\137\000\
\126\000\029\000\029\000\029\000\029\000\029\000\141\000\151\000\
\162\000\140\000\023\000\023\000\142\000\023\000\023\000\157\000\
\158\000\165\000\034\000\167\000\029\000\029\000\159\000\160\000\
\151\000\161\000\170\000\016\000\034\000\017\000\175\000\143\000\
\144\000\018\000\034\000\179\000\036\000\151\000\176\000\151\000\
\036\000\036\000\036\000\151\000\036\000\019\000\090\000\151\000\
\054\000\055\000\056\000\057\000\058\000\076\000\070\000\020\000\
\062\000\071\000\059\000\060\000\063\000\061\000\145\000\146\000\
\147\000\013\000\148\000\149\000\150\000\021\000\022\000\023\000\
\014\000\007\000\008\000\009\000\010\000\024\000\025\000\026\000\
\027\000\028\000\029\000\017\000\015\000\143\000\164\000\018\000\
\024\000\016\000\076\000\076\000\024\000\024\000\024\000\024\000\
\024\000\037\000\090\000\019\000\012\000\037\000\037\000\037\000\
\156\000\037\000\000\000\000\000\000\000\020\000\000\000\024\000\
\024\000\000\000\024\000\024\000\145\000\146\000\147\000\000\000\
\148\000\149\000\150\000\021\000\022\000\023\000\000\000\007\000\
\008\000\009\000\010\000\024\000\025\000\026\000\027\000\028\000\
\029\000\084\000\062\000\084\000\084\000\084\000\000\000\000\000\
\000\000\063\000\064\000\065\000\066\000\067\000\000\000\000\000\
\068\000\084\000\069\000\070\000\000\000\071\000\072\000\073\000\
\074\000\075\000\076\000\084\000\065\000\066\000\067\000\000\000\
\000\000\068\000\084\000\084\000\084\000\000\000\084\000\084\000\
\084\000\084\000\084\000\084\000\000\000\084\000\084\000\084\000\
\084\000\084\000\084\000\084\000\084\000\084\000\084\000\017\000\
\000\000\143\000\030\000\018\000\000\000\000\000\030\000\030\000\
\030\000\030\000\030\000\000\000\038\000\000\000\000\000\019\000\
\038\000\038\000\038\000\000\000\038\000\000\000\000\000\039\000\
\000\000\020\000\030\000\039\000\039\000\039\000\000\000\039\000\
\145\000\146\000\147\000\000\000\148\000\149\000\150\000\021\000\
\022\000\023\000\000\000\007\000\008\000\009\000\010\000\024\000\
\025\000\026\000\027\000\028\000\029\000\017\000\000\000\040\000\
\000\000\018\000\000\000\040\000\040\000\040\000\091\000\040\000\
\000\000\000\000\000\000\041\000\000\000\019\000\017\000\041\000\
\041\000\041\000\018\000\041\000\004\000\005\000\006\000\020\000\
\007\000\008\000\009\000\010\000\000\000\000\000\019\000\000\000\
\000\000\000\000\000\000\000\000\000\000\021\000\022\000\023\000\
\020\000\007\000\008\000\009\000\010\000\024\000\025\000\026\000\
\027\000\028\000\029\000\000\000\000\000\000\000\021\000\022\000\
\023\000\000\000\007\000\008\000\009\000\010\000\024\000\025\000\
\026\000\027\000\028\000\029\000\010\000\000\000\000\000\000\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\000\000\010\000\010\000\
\010\000\010\000\010\000\010\000\042\000\000\000\000\000\000\000\
\042\000\042\000\042\000\042\000\042\000\000\000\000\000\000\000\
\000\000\000\000\042\000\042\000\042\000\042\000\042\000\000\000\
\000\000\042\000\000\000\042\000\042\000\131\000\042\000\042\000\
\042\000\042\000\042\000\042\000\062\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\064\000\065\000\066\000\067\000\
\000\000\000\000\068\000\000\000\069\000\070\000\169\000\071\000\
\072\000\073\000\074\000\075\000\076\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\064\000\065\000\066\000\
\067\000\000\000\000\000\068\000\000\000\069\000\070\000\171\000\
\071\000\072\000\073\000\074\000\075\000\076\000\062\000\000\000\
\000\000\000\000\000\000\000\000\000\000\063\000\064\000\065\000\
\066\000\067\000\000\000\000\000\068\000\000\000\069\000\070\000\
\000\000\071\000\072\000\073\000\074\000\075\000\076\000\017\000\
\000\000\000\000\000\000\017\000\017\000\017\000\017\000\017\000\
\063\000\064\000\065\000\066\000\067\000\017\000\017\000\068\000\
\000\000\000\000\000\000\000\000\000\000\000\000\017\000\017\000\
\000\000\017\000\017\000\017\000\017\000\017\000\017\000\018\000\
\000\000\000\000\000\000\018\000\018\000\018\000\018\000\018\000\
\000\000\000\000\000\000\025\000\000\000\018\000\018\000\025\000\
\025\000\025\000\025\000\025\000\000\000\000\000\018\000\018\000\
\000\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
\000\000\000\000\025\000\025\000\000\000\025\000\025\000\025\000\
\025\000\025\000\025\000\027\000\000\000\000\000\000\000\027\000\
\027\000\027\000\027\000\027\000\026\000\000\000\000\000\000\000\
\026\000\026\000\026\000\026\000\026\000\000\000\000\000\000\000\
\000\000\000\000\027\000\027\000\000\000\027\000\027\000\027\000\
\027\000\027\000\027\000\026\000\026\000\000\000\026\000\026\000\
\026\000\026\000\026\000\026\000\028\000\000\000\000\000\000\000\
\028\000\028\000\028\000\028\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\028\000\028\000\000\000\028\000\028\000\
\028\000\028\000\028\000\028\000\119\000\000\000\062\000\000\000\
\000\000\000\000\000\000\000\000\000\000\063\000\064\000\065\000\
\066\000\067\000\000\000\000\000\068\000\000\000\069\000\070\000\
\000\000\071\000\072\000\073\000\074\000\075\000\076\000\163\000\
\000\000\062\000\000\000\000\000\000\000\000\000\000\000\000\000\
\063\000\064\000\065\000\066\000\067\000\000\000\000\000\068\000\
\000\000\069\000\070\000\000\000\071\000\072\000\073\000\074\000\
\075\000\076\000\168\000\000\000\062\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\064\000\065\000\066\000\067\000\
\000\000\000\000\068\000\000\000\069\000\070\000\000\000\071\000\
\072\000\073\000\074\000\075\000\076\000\121\000\062\000\000\000\
\000\000\000\000\000\000\000\000\000\000\063\000\064\000\065\000\
\066\000\067\000\000\000\000\000\068\000\000\000\069\000\070\000\
\000\000\071\000\072\000\073\000\074\000\075\000\076\000\062\000\
\130\000\000\000\000\000\000\000\000\000\000\000\063\000\064\000\
\065\000\066\000\067\000\000\000\000\000\068\000\000\000\069\000\
\070\000\000\000\071\000\072\000\073\000\074\000\075\000\076\000\
\063\000\064\000\065\000\066\000\067\000\000\000\000\000\068\000\
\000\000\069\000\000\000\000\000\071\000\072\000\073\000\074\000\
\075\000\076\000\063\000\064\000\065\000\066\000\067\000\000\000\
\000\000\068\000\000\000\000\000\000\000\000\000\071\000\072\000\
\073\000\074\000\075\000\076\000\063\000\064\000\065\000\066\000\
\067\000\000\000\000\000\068\000\000\000\000\000\000\000\000\000\
\000\000\000\000\073\000\074\000\075\000\076\000"

let yycheck = "\003\000\
\014\000\008\001\018\000\017\000\003\001\019\000\020\000\008\001\
\003\001\160\000\009\001\001\000\002\001\002\001\009\001\011\000\
\006\001\006\001\025\001\170\000\006\001\006\001\006\001\006\001\
\025\001\176\000\003\001\041\000\006\001\002\001\002\001\002\001\
\009\001\047\000\048\000\039\000\050\000\051\000\052\000\004\001\
\054\000\055\000\056\000\057\000\058\000\007\001\007\001\061\000\
\009\001\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\054\001\
\054\001\054\001\062\000\083\000\054\001\054\001\054\001\054\001\
\050\001\051\001\052\001\053\001\003\001\091\000\169\000\053\001\
\171\000\077\000\003\001\010\001\175\000\002\001\007\001\008\001\
\179\000\006\001\017\001\018\001\019\001\020\001\021\001\003\001\
\009\001\024\001\003\001\026\001\027\001\011\001\029\001\030\001\
\031\001\032\001\033\001\034\001\124\000\123\000\009\001\007\001\
\004\001\002\001\118\000\003\001\130\000\006\001\053\001\007\001\
\008\001\009\001\010\001\011\001\005\001\003\001\142\000\053\001\
\009\001\007\001\008\001\009\001\010\001\011\001\003\001\139\000\
\150\000\133\000\026\001\027\001\011\001\029\001\030\001\008\001\
\008\001\159\000\160\000\161\000\026\001\027\001\002\001\002\001\
\156\000\002\001\008\001\151\000\170\000\002\001\038\001\004\001\
\005\001\006\001\176\000\003\001\003\001\169\000\008\001\171\000\
\007\001\008\001\009\001\175\000\011\001\018\001\000\000\179\000\
\012\001\013\001\014\001\015\001\016\001\007\001\003\001\028\001\
\003\001\003\001\022\001\023\001\003\001\025\001\035\001\036\001\
\037\001\007\001\039\001\040\001\041\001\042\001\043\001\044\001\
\007\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\002\001\007\001\004\001\005\001\006\001\
\003\001\007\001\003\001\008\001\007\001\008\001\009\001\010\001\
\011\001\003\001\050\000\018\001\003\000\007\001\008\001\009\001\
\143\000\011\001\255\255\255\255\255\255\028\001\255\255\026\001\
\027\001\255\255\029\001\030\001\035\001\036\001\037\001\255\255\
\039\001\040\001\041\001\042\001\043\001\044\001\255\255\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\002\001\010\001\004\001\005\001\006\001\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\018\001\026\001\027\001\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\028\001\019\001\020\001\021\001\255\255\
\255\255\024\001\035\001\036\001\037\001\255\255\039\001\040\001\
\041\001\042\001\043\001\044\001\255\255\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\002\001\
\255\255\004\001\003\001\006\001\255\255\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\003\001\255\255\255\255\018\001\
\007\001\008\001\009\001\255\255\011\001\255\255\255\255\003\001\
\255\255\028\001\027\001\007\001\008\001\009\001\255\255\011\001\
\035\001\036\001\037\001\255\255\039\001\040\001\041\001\042\001\
\043\001\044\001\255\255\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\002\001\255\255\003\001\
\255\255\006\001\255\255\007\001\008\001\009\001\011\001\011\001\
\255\255\255\255\255\255\003\001\255\255\018\001\002\001\007\001\
\008\001\009\001\006\001\011\001\042\001\043\001\044\001\028\001\
\046\001\047\001\048\001\049\001\255\255\255\255\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\043\001\044\001\
\028\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\255\255\255\255\255\255\042\001\043\001\
\044\001\255\255\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\003\001\255\255\255\255\255\255\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\029\001\030\001\
\031\001\032\001\033\001\034\001\003\001\255\255\255\255\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\255\255\026\001\027\001\003\001\029\001\030\001\
\031\001\032\001\033\001\034\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\255\255\026\001\027\001\003\001\029\001\
\030\001\031\001\032\001\033\001\034\001\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\027\001\003\001\
\029\001\030\001\031\001\032\001\033\001\034\001\010\001\255\255\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\027\001\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\003\001\
\255\255\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\017\001\018\001\019\001\020\001\021\001\017\001\018\001\024\001\
\255\255\255\255\255\255\255\255\255\255\255\255\026\001\027\001\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\003\001\
\255\255\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\003\001\255\255\017\001\018\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\026\001\027\001\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\255\255\
\255\255\255\255\026\001\027\001\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\003\001\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\003\001\255\255\255\255\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\026\001\027\001\255\255\029\001\030\001\
\031\001\032\001\033\001\034\001\003\001\255\255\255\255\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\026\001\027\001\255\255\029\001\030\001\
\031\001\032\001\033\001\034\001\008\001\255\255\010\001\255\255\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\027\001\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\008\001\
\255\255\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\027\001\255\255\029\001\030\001\031\001\032\001\
\033\001\034\001\008\001\255\255\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\255\255\026\001\027\001\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001\009\001\010\001\255\255\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\027\001\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\255\255\026\001\
\027\001\255\255\029\001\030\001\031\001\032\001\033\001\034\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\029\001\030\001\031\001\032\001\
\033\001\034\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\029\001\030\001\
\031\001\032\001\033\001\034\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\033\001\034\001"

let yynames_const = "\
  NEW\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  SEMICOL\000\
  COMMA\000\
  DOT\000\
  COLON\000\
  ADDEQ\000\
  SUBEQ\000\
  MULEQ\000\
  DIVEQ\000\
  MODEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  INC\000\
  DEC\000\
  EXP\000\
  ASN\000\
  AND\000\
  OR\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  CONTINUE\000\
  BREAK\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  RETURN\000\
  FLD\000\
  TBL\000\
  REC\000\
  VOID\000\
  STR\000\
  BOOL\000\
  INT\000\
  FLOAT\000\
  NONE\000\
  EOF\000\
  "

let yynames_block = "\
  INT_LIT\000\
  FLOAT_LIT\000\
  BOOL_LIT\000\
  STR_LIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 40 "parser.mly"
                 ( _1 )
# 544 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    Obj.repr(
# 44 "parser.mly"
                 (
																{
																	ptype = Int;
																	dimension = []
																}
															)
# 555 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
      (
																{
																	ptype = String;
																	dimension = []
																}
															)
# 566 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
        (
																{
																	ptype = Float;
																	dimension = []
																}
															)
# 577 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
       (
																{
																	ptype = Bool;
																	dimension = []
																}
															)
# 588 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
      (
																{
																	ptype = Fld;
																	dimension = []
																}
															)
# 599 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
      (
																{
																	ptype = Rec;
																	dimension = []
																}
															)
# 610 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
      (
																{
																	ptype = Tbl;
																	dimension = []
																}
															)
# 621 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'datatype) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 86 "parser.mly"
                                  (
																{
																	ptype = _1.ptype;
																	dimension = [(if _3 == Noexpr then IntLit(0) else _3)]
																}
															)
# 634 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 114 "parser.mly"
                 ( Var(_1) )
# 641 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'index_list) in
    Obj.repr(
# 116 "parser.mly"
               ( Array(_1, _3) )
# 649 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 117 "parser.mly"
                      ( Access(_1, _3) )
# 657 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                   ( _1 )
# 664 "parser.ml"
               : 'index_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                       ( Range(Noexpr, _2) )
# 671 "parser.ml"
               : 'index_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                      ( Range(_1, Noexpr) )
# 678 "parser.ml"
               : 'index_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                         ( Range(_1, _3) )
# 686 "parser.ml"
               : 'index_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                        ( Binop(_1, Add, _3) )
# 694 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                        ( Binop(_1, Sub, _3) )
# 702 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                        ( Binop(_1, Mul, _3) )
# 710 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                         ( Binop(_1, Div, _3) )
# 718 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                       ( Binop(_1, Mod, _3) )
# 726 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                       ( Binop(_1, Exp, _3) )
# 734 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                       ( Binop(_1, Eq, _3) )
# 742 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                       ( Binop(_1, Neq, _3) )
# 750 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                       ( Binop(_1, Lt, _3) )
# 758 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                       ( Binop(_1, Gt, _3) )
# 766 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                       ( Binop(_1, Leq, _3) )
# 774 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                       ( Binop(_1, Geq, _3) )
# 782 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                       ( Binop(_1, And, _3) )
# 790 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                       ( Binop(_1, Or, _3) )
# 798 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                     ( Unop(Not, _2) )
# 805 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                            ( Unop(Neg, _2) )
# 812 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "parser.mly"
                  ( None )
# 818 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lvalue) in
    Obj.repr(
# 145 "parser.mly"
                      ( Postop(_1, Inc) )
# 825 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lvalue) in
    Obj.repr(
# 146 "parser.mly"
                      ( Postop(_1, Dec) )
# 832 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                         ( AssignOp(_1, Addeq, _3) )
# 840 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parser.mly"
                         ( AssignOp(_1, Subeq, _3) )
# 848 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
                         ( AssignOp(_1, Muleq, _3) )
# 856 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
                         ( AssignOp(_1, Diveq, _3) )
# 864 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
                         ( AssignOp(_1, Modeq, _3) )
# 872 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "parser.mly"
                        ( AssignOp(_1, Asn, _3) )
# 880 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lvalue) in
    Obj.repr(
# 154 "parser.mly"
                    ( Lval(_1) )
# 887 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
                          ( _2 )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'datatype) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
               ( Cast(_1, _3) )
# 902 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 164 "parser.mly"
                    ( _1 )
# 909 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tbl_lit) in
    Obj.repr(
# 165 "parser.mly"
                    ( Tbl(_1) )
# 916 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fld_lit) in
    Obj.repr(
# 166 "parser.mly"
                    ( _1 )
# 923 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rec_lit) in
    Obj.repr(
# 167 "parser.mly"
                    ( _1 )
# 930 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 170 "parser.mly"
               ( FuncCall(_1, _3) )
# 938 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 173 "parser.mly"
                   ( IntLit(_1) )
# 945 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 174 "parser.mly"
                     ( FloatLit(_1) )
# 952 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 175 "parser.mly"
                    ( StringLit(_1) )
# 959 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 176 "parser.mly"
                     ( BoolLit(_1) )
# 966 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'literal_list) in
    Obj.repr(
# 177 "parser.mly"
                              ( ArrayLit(List.rev _2) )
# 973 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 180 "parser.mly"
                   ( [_1] )
# 980 "parser.ml"
               : 'literal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'literal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 181 "parser.mly"
                              ( _3 :: _1 )
# 988 "parser.ml"
               : 'literal_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_list) in
    Obj.repr(
# 185 "parser.mly"
               ( List.rev _3 )
# 995 "parser.ml"
               : 'tbl_lit))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rec_init) in
    Obj.repr(
# 194 "parser.mly"
                               ( Rec(List.rev _3) )
# 1002 "parser.ml"
               : 'rec_lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 197 "parser.mly"
                             ( [RecRef(_1, _3)] )
# 1010 "parser.ml"
               : 'rec_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'rec_init) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 199 "parser.mly"
               ( RecRef(_3, _5) :: _1 )
# 1019 "parser.ml"
               : 'rec_init))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 207 "parser.mly"
               ( Fld(_3, _5) )
# 1027 "parser.ml"
               : 'fld_lit))
; (fun __caml_parser_env ->
    Obj.repr(
# 210 "parser.mly"
                      ( [] )
# 1033 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 211 "parser.mly"
                       ( List.rev _1 )
# 1040 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 214 "parser.mly"
                  ( [_1] )
# 1047 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 215 "parser.mly"
                            ( _3 :: _1 )
# 1055 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 219 "parser.mly"
                       ( { gdecls = []; fdecls = [] } )
# 1061 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 220 "parser.mly"
                        ( { gdecls = _2 :: _1.gdecls; fdecls = _1.fdecls } )
# 1069 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 221 "parser.mly"
                        ( { gdecls = _1.gdecls; fdecls = _2 :: _1.fdecls } )
# 1077 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 225 "parser.mly"
               ( {
																	fname = _2;
																	formals = _4;
																	body = Block(List.rev _7);
																	return_type = _1
															} )
# 1092 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 233 "parser.mly"
                      ( [] )
# 1098 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 234 "parser.mly"
                      ( List.rev _1 )
# 1105 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 238 "parser.mly"
                     ([
																{
																	vname = _2;
																	vtype = _1;
																	vinit = Noexpr;
																}]
															)
# 1119 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'datatype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 246 "parser.mly"
               ( ({
																	vname = _4;
																	vtype = _3;
																	vinit = Noexpr;
																}) :: _1
															)
# 1133 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id) in
    Obj.repr(
# 254 "parser.mly"
                         (
																{
																	vname = _2;
																	vtype = _1;
																	vinit = Noexpr;
																}
															)
# 1147 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 262 "parser.mly"
               (
																{
																	vname = _2;
																	vtype = _1;
																	vinit = _4;
																}
															)
# 1162 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 276 "parser.mly"
                      ( Noexpr )
# 1168 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 277 "parser.mly"
                   ( _1 )
# 1175 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 280 "parser.mly"
                      ( [] )
# 1181 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 281 "parser.mly"
                        ( _2 :: _1 )
# 1189 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 284 "parser.mly"
                      ( Expr(_1) )
# 1196 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 285 "parser.mly"
                          ( Return(_2) )
# 1203 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 286 "parser.mly"
                            ( Block(List.rev _2) )
# 1210 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 288 "parser.mly"
               ( If(_3, _5, _7) )
# 1219 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 290 "parser.mly"
               ( If(_3, _5, EmptyStmt) )
# 1227 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 292 "parser.mly"
               ( For(_3, _5, _7, _9) )
# 1237 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 294 "parser.mly"
               ( While(_3, _5) )
# 1245 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 295 "parser.mly"
                        ( Continue )
# 1251 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 296 "parser.mly"
                       ( Break )
# 1257 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 297 "parser.mly"
                   ( VarDeclStmt(_1) )
# 1264 "parser.ml"
               : 'stmt))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
